---
- name: Réécrire entièrement le fichier smb.conf pour Samba
  hosts: all
  become: true
  tasks:

    # - name: Écrire le fichier smb.conf avec la configuration correcte
    #   copy:
    #     dest: /etc/samba/smb.conf
    #     content: |
    #       [global]
    #          workgroup = MYWORKGROUP
    #          security = ADS
    #          realm = MON_DOMAINE.LOCAL
    #          encrypt passwords = yes
    #          log file = /var/log/samba/%m.log
    #          log level = 1

    #       # Intégration AD
    #          idmap config *:backend = tdb
    #          idmap config *:range = 1000-2000
    #          idmap config MYWORKGROUP:backend = rid
    #          idmap config MYWORKGROUP:range = 2001-3000
    #          winbind use default domain = yes
    #          winbind offline logon = true
    #          winbind enum users = yes
    #          winbind enum groups = yes

    #       # Partage de fichiers (optionnel)
    #       [partage]
    #          path = /srv/samba/partage
    #          read only = no
    #          browsable = yes
          
    #       # BEGIN IDMAP Configuration
    #          idmap config * : range = 10000-20000
    #          idmap config MYWORKGROUP : range = 20001-30000
    #       # END IDMAP Configuration
    #   backup: yes

    - name: Vérifier la configuration Samba avec testparm
      command: testparm
      register: testparm_output
      failed_when: "'Error' in testparm_output.stderr"
      changed_when: false

    # - name: Redémarrer Samba pour appliquer les changements
    #   service:
    #     use : service
    #     name: smbd
    #     state: restarted

    - name: Reconfigurer le paquet samba-common-bin
      command: dpkg --configure -a

- name: Joindre une machine Ubuntu au domaine Active Directory
  hosts: all
  become: true  # Exécute les tâches en tant que root
  vars:
    domaine_ad: "MAME.net"         # Nom du domaine Active Directory
    realm_ad: "MAME.NET"           # Nom du REALM (toujours en majuscules)
    serveur_ad_ip: "10.8.0.3"      # Adresse IP du contrôleur de domaine AD
    utilisateur_domaine: "Administrator"  # Utilisateur avec droits sur le domaine
    mot_de_passe_domaine: "Roa42300"  # Mot de passe pour l'utilisateur

  tasks:

      
    # - name: Corriger les plages IDMAP dans smb.conf
    #   replace:
    #     path: /etc/samba/smb.conf
    #     regexp: 'idmap config MYWORKGROUP : range = \d+-\d+'
    #     replace: 'idmap config MYWORKGROUP : range = 20001-30000'

    # - name: Ajouter idmap config pour le domaine par défaut si absent
    #   blockinfile:
    #     path: /etc/samba/smb.conf
    #     block: |
    #       idmap config * : range = 10000-20000
    #       idmap config MYWORKGROUP : range = 20001-30000
    #     marker: "# {mark} IDMAP Configuration"

    # # - name: Tester la configuration Samba avec testparm
    # #   command: testparm
    # #   register: testparm_output
    # #   failed_when: "'Error' in testparm_output.stderr"

    # # - name: Reconfigurer le paquet samba-common-bin
    # #   command: dpkg --configure -a

    # - name: Corriger la configuration de Samba dans smb.conf
    #   lineinfile:
    #     path: /etc/samba/smb.conf
    #     regexp: '^security = ADS.*'
    #     line: 'security = ADS'
    #     state: present
    #     backrefs: no

    # - name: Ajouter un commentaire séparé pour le mode sécurité
    #   lineinfile:
    #     path: /etc/samba/smb.conf
    #     insertafter: '^security = ADS'
    #     line: '# Mode de sécurité : AD pour Active Directory'
    #     state: present

    # # - name: Tester la configuration Samba avec testparm
    # #   command: testparm
    # #   register: testparm_output
    # #   failed_when: "'Error' in testparm_output.stderr"

    # # - name: Reconfigurer le paquet samba-common-bin
    # #   command: dpkg --configure -a

    - name: Installer les paquets nécessaires
      apt:
        name:
          - realmd
          - sssd
          - samba-common-bin
          - samba-libs
          - adcli
          - packagekit
        state: present
        update_cache: yes

    # - name: Créer un fichier de configuration Kerberos (/etc/krb5.conf)
    #   copy:
    #     dest: /etc/krb5.conf
    #     content: |
    #       [libdefaults]
    #           default_realm = {{ realm_ad }}
    #           dns_lookup_realm = false
    #           dns_lookup_kdc = true
    #           ticket_lifetime = 24h
    #           renew_lifetime = 7d
    #           forwardable = true

    #       [realms]
    #           {{ realm_ad }} = {
    #               kdc = {{ serveur_ad_ip }}
    #               admin_server = {{ serveur_ad_ip }}
    #           }

    #       [domain_realm]
    #           .{{ domaine_ad | lower }} = {{ realm_ad }}
    #           {{ domaine_ad | lower }} = {{ realm_ad }}

    - name: Configurer le DNS pour pointer vers le serveur Active Directory
      lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ serveur_ad_ip }}"
        state: present
        insertafter: EOF

    - name: Découvrir le domaine Active Directory
      command: "realm discover {{ domaine_ad }}"
      register: realm_discover
      changed_when: false

    - name: Joindre la machine au domaine
      command: >
        realm join {{ domaine_ad }} -U {{ utilisateur_domaine }} --password {{ mot_de_passe_domaine }}
      args:
        creates: /etc/sssd/sssd.conf

    - name: Configurer SSSD pour l'authentification AD
      copy:
        dest: /etc/sssd/sssd.conf
        content: |
          [sssd]
          domains = {{ domaine_ad }}
          config_file_version = 2
          services = nss, pam

          [domain/{{ domaine_ad }}]
          ad_domain = {{ domaine_ad }}
          krb5_realm = {{ realm_ad }}
          realmd_tags = manages-system joined-with-samba
          cache_credentials = true
          id_provider = ad
          auth_provider = ad
          chpass_provider = ad
          access_provider = ad
      notify:
        - Redémarrer SSSD

    - name: Configurer PAM pour créer les répertoires utilisateurs automatiquement
      lineinfile:
        path: /etc/pam.d/common-session
        line: "session required pam_mkhomedir.so skel=/etc/skel/ umask=0077"
        state: present

    - name: Vérifier l'intégration de la machine au domaine
      command: "realm list"
      register: realm_list
      changed_when: false

    - name: Afficher le résultat de l'intégration
      debug:
        msg: "La machine a rejoint avec succès le domaine {{ domaine_ad }}."
      when: "'configured' in realm_list.stdout"

  handlers:
    - name: Redémarrer SSSD
      service:
        name: sssd
        state: restarted


- name: Configuration complète d'OpenVPN
  hosts: vpn
  become: true

  vars:
    openvpn_dir: /etc/openvpn
    easyrsa_dir: /etc/openvpn/easy-rsa
    export_dir: /etc/openvpn/export
    server_name: "server"
    vpn_subnet: "10.8.0.0"
    vpn_netmask: "255.255.255.0"

  tasks:
    # Étape 1 : Installer OpenVPN et Easy-RSA
    - name: Installer OpenVPN et Easy-RSA
      apt:
        name:
          - openvpn
          - easy-rsa
        state: present
        update_cache: yes

    # Étape 2 : Préparer les répertoires nécessaires
    - name: Créer les répertoires nécessaires pour OpenVPN
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ openvpn_dir }}"
        - "{{ easyrsa_dir }}"
        - "{{ export_dir }}"  # Répertoire pour stocker le fichier client.ovpn

    # Étape 3 : Copier Easy-RSA
    - name: Copier les fichiers Easy-RSA dans le répertoire
      copy:
        src: /usr/share/easy-rsa/
        dest: "{{ easyrsa_dir }}"
        remote_src: yes

    # Étape 4 : Configurer les variables Easy-RSA
    - name: Configurer les variables Easy-RSA
      lineinfile:
        path: "{{ easyrsa_dir }}/vars"
        create: yes
        line: "{{ item }}"
      loop:
        - 'set_var EASYRSA_REQ_COUNTRY    "FR"'
        - 'set_var EASYRSA_REQ_PROVINCE   "Ile-de-France"'
        - 'set_var EASYRSA_REQ_CITY       "Paris"'
        - 'set_var EASYRSA_REQ_ORG        "MyVPN"'
        - 'set_var EASYRSA_REQ_EMAIL      "admin@myvpn.local"'
        - 'set_var EASYRSA_REQ_OU         "IT Department"'

    # Étape 5 : Générer les certificats nécessaires
    - name: Initialiser le PKI
      command: ./easyrsa init-pki
      args:
        chdir: "{{ easyrsa_dir }}"

    - name: Construire le certificat de l'autorité de certification (CA)
      command: ./easyrsa build-ca nopass
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Générer le certificat et la clé privée du serveur
      command: ./easyrsa gen-req {{ server_name }} nopass
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Signer le certificat du serveur
      command: ./easyrsa sign-req server {{ server_name }}
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Générer le certificat Diffie-Hellman
      command: ./easyrsa gen-dh
      args:
        chdir: "{{ easyrsa_dir }}"

    - name: Générer une clé TLS Auth
      command: openvpn --genkey --secret ta.key
      args:
        chdir: "{{ easyrsa_dir }}/pki"

    # Étape 6 : Copier les certificats et clés vers OpenVPN
    - name: Copier les certificats et clés vers /etc/openvpn
      copy:
        src: "{{ easyrsa_dir }}/pki/{{ item.src }}"
        dest: "{{ openvpn_dir }}/{{ item.dest }}"
        remote_src: yes
      loop:
        - { src: "ca.crt", dest: "ca.crt" }
        - { src: "issued/{{ server_name }}.crt", dest: "server.crt" }
        - { src: "private/{{ server_name }}.key", dest: "server.key" }
        - { src: "dh.pem", dest: "dh.pem" }
        - { src: "ta.key", dest: "ta.key" }

    # Étape 7 : Configurer OpenVPN
    - name: Configurer OpenVPN (server.conf)
      copy:
        dest: "{{ openvpn_dir }}/server.conf"
        content: |
          port 16385
          proto udp
          dev tun
          ca ca.crt
          cert server.crt
          key server.key
          dh dh.pem
          auth SHA256
          tls-auth ta.key 0
          server {{ vpn_subnet }} {{ vpn_netmask }}
          ifconfig-pool-persist ipp.txt
          keepalive 10 120
          cipher AES-256-CBC
          persist-key
          persist-tun
          status openvpn-status.log
          log-append /var/log/openvpn.log
          verb 3
          explicit-exit-notify 1

    # Étape 8 : Activer et démarrer OpenVPN
    - name: Activer et démarrer le service OpenVPN
      service:
        name: openvpn
        state: started
        enabled: yes

    # Étape 9 : Générer les certificats pour le client
    - name: Générer une clé et un certificat pour le client
      command: ./easyrsa gen-req client nopass
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"

    - name: Signer le certificat du client
      command: ./easyrsa sign-req client client
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"
    
    - name: Appliquer des permissions 777 sur tous les fichiers générés
      file:
        path: "{{ item }}"
        mode: '777'
      loop:
        - /etc/openvpn


    # Étape 10 : Générer le fichier client.ovpn
    # - name: Créer le certificat et le fichier client.ovpn via Easy-RSA
    #   command: ./easyrsa build-client-full client nopass
    #   args:
    #     chdir: /etc/openvpn/easy-rsa

    - name: Générer automatiquement le fichier client.ovpn
      shell: |
        echo "client
        dev tun
        proto udp
        remote {{ ansible_host }} 1194
        resolv-retry infinite
        nobind
        persist-key
        persist-tun
        remote-cert-tls server
        auth SHA256
        cipher AES-256-CBC
        verb 3
        key-direction 1
        <ca>" > /etc/openvpn/client.ovpn && \
        cat /etc/openvpn/easy-rsa/pki/ca.crt >> /etc/openvpn/client.ovpn && \
        echo "</ca>
        <cert>" >> /etc/openvpn/client.ovpn && \
        cat /etc/openvpn/easy-rsa/pki/issued/client.crt >> /etc/openvpn/client.ovpn && \
        echo "</cert>
        <key>" >> /etc/openvpn/client.ovpn && \
        cat /etc/openvpn/easy-rsa/pki/private/client.key >> /etc/openvpn/client.ovpn && \
        echo "</key>
        <tls-auth>" >> /etc/openvpn/client.ovpn && \
        cat /etc/openvpn/easy-rsa/pki/ta.key >> /etc/openvpn/client.ovpn && \
        echo "</tls-auth>" >> /etc/openvpn/client.ovpn
      args:
        creates: /etc/openvpn/client.ovpn

    - name: S'assurer que le fichier client.ovpn est généré
      stat:
        path: /etc/openvpn/client.ovpn
      register: client_ovpn_file

    - name: Afficher un message si le fichier client.ovpn est généré
      debug:
        msg: "Le fichier client.ovpn a été généré avec succès et est disponible ici : /etc/openvpn/client.ovpn"
      when: client_ovpn_file.stat.exists



