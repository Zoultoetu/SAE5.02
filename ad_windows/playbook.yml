---
- name: Réécrire entièrement le fichier smb.conf pour Samba
  hosts: all
  become: true
  tasks:

    - name: Vérifier la configuration Samba avec testparm
      command: testparm
      register: testparm_output
      failed_when: "'Error' in testparm_output.stderr"
      changed_when: false

    - name: Reconfigurer le paquet samba-common-bin
      command: dpkg --configure -a


- name: Joindre une machine Ubuntu au domaine Active Directory
  hosts: all
  become: true
  vars:
    domaine_ad: "MAME.net"
    realm_ad: "MAME.net"
    serveur_ad_ip: "10.8.0.3"
    utilisateur_domaine: "Administrator"
    mot_de_passe_domaine: "Roa42300"

  tasks:

    - name: Installer les paquets nécessaires
      apt:
        name:
          - realmd
          - sssd
          - samba-common-bin
          - samba-libs
          - adcli
          - packagekit
        state: present
        update_cache: yes

    - name: Redémarrer SSSD
      service:
        name: dbus
        state: started

    - name: Copier les fichiers samba dans le répertoire
      copy:
        src: /home/toine-fa/SAE5.02/ad_windows/samba/smb.conf
        dest: "/etc/samba/smb.conf"

    - name: Découvrir le domaine Active Directory
      command: "realm discover {{ domaine_ad }}"
      register: realm_discover
      changed_when: false

    - name: Joindre la machine au domaine
      command: >
        echo {{ mot_de_passe_domaine }} | realm join {{ domaine_ad }} -U {{ utilisateur_domaine }}
      args:
        creates: /etc/sssd/sssd.conf

    - name: Configurer SSSD pour l'authentification AD
      copy:
        dest: /etc/sssd/sssd.conf
        content: |
          [sssd]
          domains = {{ domaine_ad }}
          config_file_version = 2
          services = nss, pam

          [domain/{{ domaine_ad }}]
          ad_domain = {{ domaine_ad }}
          krb5_realm = {{ realm_ad }}
          realmd_tags = manages-system joined-with-samba
          cache_credentials = true
          id_provider = ad
          auth_provider = ad
          chpass_provider = ad
          access_provider = ad
      notify:
        - Redémarrer SSSD

    - name: Configurer PAM pour créer les répertoires utilisateurs automatiquement
      lineinfile:
        path: /etc/pam.d/common-session
        line: "session required pam_mkhomedir.so skel=/etc/skel/ umask=0077"
        state: present

    - name: Vérifier l'intégration de la machine au domaine
      command: "realm list"
      register: realm_list
      changed_when: false

    - name: Afficher le résultat de l'intégration
      debug:
        msg: "La machine a rejoint avec succès le domaine {{ domaine_ad }}."
      when: "'configured' in realm_list.stdout"

  handlers:
    - name: Redémarrer SSSD
      service:
        name: sssd
        state: restarted


- name: Configuration complète d'OpenVPN
  hosts: vpn
  become: true

  vars:
    openvpn_dir: /etc/openvpn
    easyrsa_dir: /etc/openvpn/easy-rsa
    export_dir: /etc/openvpn/export
    server_name: "server"
    vpn_subnet: "10.7.0.0"
    vpn_netmask: "255.255.255.0"

  tasks:
    - name: Installer OpenVPN et Easy-RSA
      apt:
        name:
          - openvpn
          - easy-rsa
        state: present
        update_cache: yes

    - name: Créer les répertoires nécessaires pour OpenVPN
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ openvpn_dir }}"
        - "{{ easyrsa_dir }}"
        - "{{ export_dir }}"

    - name: Copier les fichiers Easy-RSA
      copy:
        src: /usr/share/easy-rsa/
        dest: "{{ easyrsa_dir }}"
        remote_src: yes

    - name: Configurer les variables Easy-RSA
      lineinfile:
        path: "{{ easyrsa_dir }}/vars"
        create: yes
        line: "{{ item }}"
      loop:
        - 'set_var EASYRSA_REQ_COUNTRY    "FR"'
        - 'set_var EASYRSA_REQ_PROVINCE   "Ile-de-France"'
        - 'set_var EASYRSA_REQ_CITY       "Paris"'
        - 'set_var EASYRSA_REQ_ORG        "MyVPN"'
        - 'set_var EASYRSA_REQ_EMAIL      "admin@myvpn.local"'
        - 'set_var EASYRSA_REQ_OU         "IT Department"'
    - name: Générer le fichier ta.key pour OpenVPN
      command: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key
      args:
        creates: /etc/openvpn/easy-rsa/pki/ta.key


    - name: Initialiser le PKI et générer les certificats nécessaires
      command: "{{ item }}"
      args:
        chdir: "{{ easyrsa_dir }}"
      environment:
        EASYRSA_BATCH: "1"
      loop:
        - ./easyrsa init-pki
        - ./easyrsa build-ca nopass
        - ./easyrsa gen-req {{ server_name }} nopass
        - ./easyrsa sign-req server {{ server_name }}
        - ./easyrsa gen-dh
        - openvpn --genkey --secret ta.key

    - name: Copier les certificats et clés vers /etc/openvpn
      copy:
        src: "{{ easyrsa_dir }}/pki/{{ item.src }}"
        dest: "{{ openvpn_dir }}/{{ item.dest }}"
        remote_src: yes
      loop:
        - { src: "ca.crt", dest: "ca.crt" }
        - { src: "issued/{{ server_name }}.crt", dest: "server.crt" }
        - { src: "private/{{ server_name }}.key", dest: "server.key" }
        - { src: "dh.pem", dest: "dh.pem" }
        - { src: "ta.key", dest: "ta.key" }

    - name: Vérifier l'existence des fichiers OpenVPN
      stat:
        path: "{{ openvpn_dir }}/{{ item }}"
      register: file_check
      loop:
        - ca.crt
        - server.crt
        - server.key
        - dh.pem
        - ta.key

    - name: Échouer si un fichier requis est manquant
      fail:
        msg: "Le fichier {{ item.item }} est manquant dans {{ openvpn_dir }}."
      when: not item.stat.exists
      loop: "{{ file_check.results }}"

    - name: Configurer OpenVPN (server.conf)
      copy:
        dest: "{{ openvpn_dir }}/server.conf"
        content: |
          port 16387
          proto udp
          dev tun
          ca ca.crt
          cert server.crt
          key server.key
          dh dh.pem
          auth SHA256
          tls-auth ta.key 0
          server {{ vpn_subnet }} {{ vpn_netmask }}
          push "route 192.168.0.0 255.255.255.0"
          ifconfig-pool-persist ipp.txt
          keepalive 10 120
          cipher AES-256-CBC
          persist-key
          persist-tun
          status openvpn-status.log
          log-append /var/log/openvpn.log
          verb 3
          explicit-exit-notify 1

    - name: Activer et démarrer le service OpenVPN
      service:
        name: openvpn
        state: started
        enabled: yes
